# -*- coding: utf-8 -*-
"""image_quality_classification_DiT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O_lf7JVJYvYEbiOhrk5aDIj6PYIPt4U2
"""

model_checkpoint = "microsoft/dit-base-finetuned-rvlcdip" # pre-trained model from which to fine-tune
batch_size = 8 # batch size for training and evaluation

!pip install -q datasets transformers

import os
import numpy as np
import pandas as pd
import torch
from datasets import load_dataset
from datasets import load_metric
from transformers import AutoFeatureExtractor
from transformers import AutoModelForImageClassification, TrainingArguments, Trainer

from torchvision.transforms import (
    CenterCrop,
    Compose,
    Normalize,
    RandomHorizontalFlip,
    RandomResizedCrop,
    Resize,
    ToTensor,
)

feature_extractor = AutoFeatureExtractor.from_pretrained(model_checkpoint)

metric = load_metric("accuracy")
label2id = {"bad": 0, "good": 1}
id2label = {0: "bad", 1: "good"}
model = AutoModelForImageClassification.from_pretrained(
    model_checkpoint, 
    label2id=label2id,
    id2label=id2label,
    ignore_mismatched_sizes = True, # provide this in case you're planning to fine-tune an already fine-tuned checkpoint
)

metric = load_metric("accuracy")
label2id = {"bad": 0, "good": 1}
id2label = {0: "bad", 1: "good"}
model = AutoModelForImageClassification.from_pretrained(
    model_checkpoint, 
    label2id=label2id,
    id2label=id2label,
    ignore_mismatched_sizes = True, # provide this in case you're planning to fine-tune an already fine-tuned checkpoint
)

df = pd.read_csv(r"/content/image_quality_data/train_folds_aug.csv")
# "/content/drive/MyDrive/image_quality/train_folder/train_folds_aug.csv"
# /content/image_quality_data/
df.head()

normalize = Normalize(mean=feature_extractor.image_mean, std=feature_extractor.image_std)
train_transforms = Compose(
        [
            RandomResizedCrop(feature_extractor.size),
            # Resize(feature_extractor.size),
            # RandomHorizontalFlip(),
            ToTensor(),
            normalize,
        ]
    )

val_transforms = Compose(
        [
            Resize(feature_extractor.size),
            CenterCrop(feature_extractor.size),
            ToTensor(),
            normalize,
        ]
    )

def preprocess_train(example_batch):
    """Apply train_transforms across a batch."""
    example_batch["pixel_values"] = [
        train_transforms(image.convert("RGB")) for image in example_batch["image"]
    ]
    return example_batch

def preprocess_val(example_batch):
    """Apply val_transforms across a batch."""
    example_batch["pixel_values"] = [val_transforms(image.convert("RGB")) for image in example_batch["image"]]
    return example_batch

def compute_metrics(eval_pred):
    """Computes accuracy on a batch of predictions"""
    predictions = np.argmax(eval_pred.predictions, axis=1)
    return metric.compute(predictions=predictions, references=eval_pred.label_ids)

def collate_fn(examples):
    pixel_values = torch.stack([example["pixel_values"] for example in examples])
    labels = torch.tensor([example["label"] for example in examples])
    return {"pixel_values": pixel_values, "labels": labels}

model_name = model_checkpoint.split("/")[-1]
def get_args(fold):
  args_fold = TrainingArguments(
      f"{model_name}-finetuned-image_quality-{fold}",
      remove_unused_columns=False,
      evaluation_strategy = "epoch",
      save_strategy = "epoch",
      save_total_limit = 2,
      learning_rate=1e-5,
      per_device_train_batch_size=batch_size,
      gradient_accumulation_steps=4,
      per_device_eval_batch_size=batch_size,
      num_train_epochs=20,
      warmup_ratio=0.1,
      logging_steps=10,
      load_best_model_at_end=True,
      metric_for_best_model="accuracy",
      push_to_hub=False,
  )
  return args_fold

for fold in range(2):
  print("Fold-------------------------{}-------------------".format(fold))
  train_df = df[df["kfold"] != fold].reset_index()
  val_df = df[df["kfold"] == fold].reset_index()
  args = get_args(fold)
  image_folder_path = "/content/image_quality_data"
  train_img_list = [os.path.join(image_folder_path, train_df["target"][j], train_df["file_name"][j]) for j in range(len(train_df["file_name"].values))]
  test_img_list = [os.path.join(image_folder_path, val_df["target"][j], val_df["file_name"][j]) for j in range(len(val_df["file_name"].values))]
  dataset = load_dataset("imagefolder", data_files={"train": train_img_list, "test": test_img_list})

  train_ds = dataset['train']
  val_ds = dataset['test']

  train_ds.set_transform(preprocess_train)
  val_ds.set_transform(preprocess_val)
  trainer = Trainer(
      model,
      args,
      train_dataset=train_ds,
      eval_dataset=val_ds,
      tokenizer=feature_extractor,
      compute_metrics=compute_metrics,
      data_collator=collate_fn,
  )
  train_results = trainer.train()
  # rest is optional but nice to have
  model_dir = "/content/image_quality_data/model_"+str(fold)
  try:
    os.mkdir(model_dir)
  except:
    continue
  trainer.save_model(output_dir = model_dir)

import os

os.getcwd()

!nvidia-smi

import transformers
import torch

transformers.__version__

torch.__version__

import shutil
shutil.rmtree("/content/dit-base-finetuned-rvlcdip-finetuned-image_quality-0")

